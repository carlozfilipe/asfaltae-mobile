{"version":3,"sources":["../browser/src/util/ImportUtils.ts"],"names":[],"mappings":"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","file":"ImportUtils.js","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport {pathToFileURL} from \"url\";\n\nexport async function importOrRequireFile(filePath: string): Promise<[result: any, moduleType: \"esm\" | \"commonjs\"]> {\n    const tryToImport = async (): Promise<[any, \"esm\"]> => {\n        // `Function` is required to make sure the `import` statement wil stay `import` after\n        // transpilation and won't be converted to `require`\n        return [await Function(\"return filePath => import(filePath)\")()(\n            filePath.startsWith(\"file://\") ? filePath : pathToFileURL(filePath).toString()\n        ), \"esm\"];\n    };\n    const tryToRequire = async (): Promise<[any, \"commonjs\"]> => {\n        return [require(filePath), \"commonjs\"];\n    };\n\n    const extension = filePath.substring(filePath.lastIndexOf(\".\") + \".\".length);\n\n    if (extension === \"mjs\" || extension === \"mts\")\n        return tryToImport();\n    else if (extension === \"cjs\" || extension === \"cts\")\n        return tryToRequire();\n    else if (extension === \"js\" || extension === \"ts\") {\n        const packageJson = await getNearestPackageJson(filePath);\n\n        if (packageJson != null) {\n            const isModule = (packageJson as any)?.type === \"module\";\n\n            if (isModule)\n                return tryToImport();\n            else\n                return tryToRequire();\n        } else\n            return tryToRequire();\n    }\n\n    return tryToRequire();\n}\n\nfunction getNearestPackageJson(filePath: string): Promise<object | null> {\n    return new Promise((accept) => {\n        let currentPath = filePath;\n\n        function searchPackageJson() {\n            const nextPath = path.dirname(currentPath);\n\n            if (currentPath === nextPath) // the top of the file tree is reached\n                accept(null);\n            else {\n                currentPath = nextPath;\n                const potentialPackageJson = path.join(currentPath, \"package.json\");\n\n                fs.stat(potentialPackageJson, (err, stats) => {\n                    if (err != null)\n                        searchPackageJson();\n                    else if (stats.isFile()) {\n                        fs.readFile(potentialPackageJson, \"utf8\", (err, data) => {\n                            if (err != null)\n                                accept(null);\n                            else {\n                                try {\n                                    accept(JSON.parse(data));\n                                } catch (err) {\n                                    accept(null);\n                                }\n                            }\n                        });\n                    } else\n                        searchPackageJson();\n                });\n            }\n        }\n\n        searchPackageJson();\n    });\n}\n"],"sourceRoot":".."}